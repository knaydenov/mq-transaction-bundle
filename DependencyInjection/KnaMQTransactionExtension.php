<?phpnamespace Kna\MQTransactionBundle\DependencyInjection;use Kna\MQTransactionBundle\Command\SendMessagesCommand;use Symfony\Component\Config\FileLocator;use Symfony\Component\DependencyInjection\ContainerBuilder;use Symfony\Component\DependencyInjection\ContainerInterface;use Symfony\Component\DependencyInjection\Definition;use Symfony\Component\DependencyInjection\Extension\Extension;use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;use Symfony\Component\DependencyInjection\Reference;class KnaMQTransactionExtension extends Extension{    /**     * {@inheritdoc}     */    public function load(array $configs, ContainerBuilder $container): void    {        $configuration = new Configuration();        $config = $this->processConfiguration($configuration, $configs);        if ($config['message']['class']) {            $container->setParameter('kna_mq_transaction.message.class', $config['message']['class']);        }        if ($config['default_producer']) {            $container->setParameter('kna_mq_transaction.default_producer', $config['default_producer']);        }        $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));        $loader->load('services.xml');        if ($config['enable_logger']) {            $this->injectLogger($container->getDefinition(SendMessagesCommand::class));        }    }    private function injectLogger(Definition $definition)    {        $definition->addTag('monolog.logger', [            'channel' => 'mq_transaction'        ]);        $definition->addMethodCall('setLogger', array(new Reference('logger', ContainerInterface::IGNORE_ON_INVALID_REFERENCE)));    }}